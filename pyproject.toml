[build-system]
requires = [
    # N.B.: The lowest version of setuptools to support pyproject.toml [project] configuration.
    "setuptools>=61",
    "ziglang==0.14.0"
]
build-backend = "pexcz_build"
backend-path = ["build-system"]

[project]
name = "pexcz"
version = "0.1.0"
description = "Native Pex."
readme = "README.md"
authors = [
    { name = "The PEX developers", email = "developers@pex-tool.org" }
]
requires-python = ">=2.7"
dependencies = []

[tool.setuptools.packages.find]
where = ["python"]
include = ["pexcz*"]

[dependency-groups]
dev = [
    "dev-cmd; python_version >= '3.8'",
    "mypy",
    "pex",
    "pytest",
    "ruff",
    "types-setuptools",
    "ziglang==0.14.0; python_version >= '3.8'",
]

[tool.ruff]
line-length = 100

[tool.ruff.lint]
extend-select = ["I"]
extend-safe-fixes = ["F401"]

[tool.uv]
required-version = ">=0.6"
# TODO(John Sirois): The one case this doesn't cover is removal of the zig artifacts from
#  python/pexcz/{bin,lib}. Currently, uv is blind to this.
cache-keys = [
    # Python:
    "build-system/**",
    "pyproject.toml",
    "setup.py",
    "MANIFEST.in",
    # Zig:
    "build.zig",
    "build.zig.zon",
    "src/**",
    "tools/**",
    { env = "PEXCZ_RELEASE_MODE" },
    { env = "PEXCZ_UV_FORCE_BUILD" }
]

[tool.dev-cmd.commands]
fmt = ["ruff", "format"]
check-fmt = ["ruff", "format", "--diff"]

lint = ["ruff", "check", "--fix"]
check-lint = ["ruff", "check"]

zig-fmt = ["python", "-m", "ziglang", "fmt", "."]
zig-check-fmt = ["python", "-m", "ziglang", "fmt", ".", "--check"]

zig-test = ["python", "-m", "ziglang", "build", "--color", "on", "test"]

[tool.dev-cmd.commands.type-check.factors]
py = "The Python version to type check in <major>.<minor> form; i.e.: 3.13."
[tool.dev-cmd.commands.type-check]
args = [
    "mypy",
    "--python-version", "{-py:{markers.python_version}}",
    "--cache-dir", ".mypy_cache_{markers.python_version}",
    "python",
]

[tool.dev-cmd.commands.pytest]
args = ["pytest"]
cwd = "python/tests"
accepts-extra-args = true

[tool.dev-cmd.commands.zig]
args = ["python", "-m", "ziglang"]
accepts-extra-args = true

[tool.dev-cmd.commands.package]
env = {"PEXCZ_BUILD_TARGETS" = "All", "PEXCZ_RELEASE_MODE" = "fast"}
args = ["uv", "build"]

[tool.dev-cmd.tasks]
test = [["zig-test", "pytest"]]

[tool.dev-cmd.tasks.checks]
description = "Runs all development checks, including auto-formatting code."
steps = [[
    # Zig formatting and testing are independent of Python checks so we run these as two parallel
    # groups.
    [
        "zig-fmt",
        "zig-test"
    ],
    [
        "fmt",
        "lint",
        # Parallelizing the type checks and test is safe (they don't modify files), and it nets a ~3x
        # speedup over running them all serially.
        ["type-check-py3.{8..13}", "pytest"],
    ]
]]

[tool.dev-cmd.tasks.ci]
description = "Runs all checks used for CI."
# None of the CI checks modify files; so they can all be run in parallel which nets a ~1.5x speedup.
steps = [["check-fmt", "check-lint", "type-check", "pytest", "zig-check-fmt", "zig-test"]]

[tool.dev-cmd]
default = "checks"
exit-style = "immediate"
