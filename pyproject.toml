[build-system]
requires = [
    # N.B.: The lowest version of setuptools to support pyproject.toml [project] configuration.
    "setuptools>=61",
]
build-backend = "pexcz_build"
backend-path = ["build-system"]

[project]
name = "pexcz"
version = "0.1.0"
description = "Native Pex."
readme = "README.md"
authors = [
    { name = "The PEX developers", email = "developers@pex-tool.org" }
]
requires-python = ">=2.7"
dependencies = []

[tool.setuptools.packages.find]
where = ["python"]
include = ["pexcz*"]

[dependency-groups]
dev = [
    "dev-cmd[old-pythons]; python_version >= '3.8'",
    # We pin at 0.971 since this is the last version of mypy that supports `--python-version 2.7`.
    "mypy[python2]==0.971; python_version >= '3.6'",
    "pex",
    "pytest",
    "ruff; python_version >= '3.8'",
    "types-setuptools",
]

[tool.ruff]
line-length = 100

[tool.ruff.lint]
extend-select = ["I"]
extend-safe-fixes = ["F401"]

[tool.uv]
required-version = ">=0.6"
# TODO(John Sirois): The one case this doesn't cover is removal of the zig artifacts from
#  python/pexcz/{bin,lib}. Currently, uv is blind to this.
cache-keys = [
    # Python:
    "build-system/**/*",
    "pyproject.toml",
    "setup.py",
    "MANIFEST.in",
    # Zig:
    "build.zig",
    "build.zig.zon",
    "src/**/*",
    "tools/**/*",
    { env = "PEXCZ_BUILD_TARGETS" },
    { env = "PEXCZ_RELEASE_MODE" },
    { env = "PEXCZ_UV_FORCE_BUILD" },
    { env = "PEXCZ_ZIG_BUILD" }
]

### `dev-cmd` Commands and Tasks:
### -----------------------------

[tool.dev-cmd.commands]
fmt = ["ruff", "format"]
check-fmt = ["ruff", "format", "--diff"]

lint = ["ruff", "check", "--fix"]
check-lint = ["ruff", "check"]

zig-fmt = ["build-system/zig.py", "fmt", "."]
zig-check-fmt = ["build-system/zig.py", "fmt", ".", "--check"]

zig-test = ["build-system/zig.py", "build", "--color", "on", "test"]

[tool.dev-cmd.commands.type-check.factors]
py = "The Python version to type check in <major>.<minor> form; i.e.: 3.13."
[tool.dev-cmd.commands.type-check]
args = [
    "mypy",
    "--python-version", "{-py:{markers.python_version}}",
    "--cache-dir", ".mypy_cache_{markers.python_version}",
    "build-system",
    "python",
    "src"
]

[tool.dev-cmd.commands.pytest]
python = "{-py:}"
env = {"PYTHONHASHSEED" = "{--hashseed}"}
args = ["pytest"]
cwd = "python/tests"
accepts-extra-args = true

[tool.dev-cmd.commands.zig]
args = ["build-system/zig.py"]
accepts-extra-args = true

[tool.dev-cmd.commands.package]
env = {"PEXCZ_BUILD_TARGETS" = "All", "PEXCZ_RELEASE_MODE" = "fast"}
args = ["uv", "build"]

[tool.dev-cmd.tasks]
test = [["zig-test", "pytest"]]

[tool.dev-cmd.tasks.checks]
description = "Runs all development checks, including auto-formatting code."
steps = [[
    # Zig formatting and testing are independent of Python checks so we run these as two parallel
    # groups.
    [
        "zig-fmt",
        "zig-test"
    ],
    [
        "fmt",
        "lint",
        # Parallelizing the type checks and test is safe (they don't modify files), and it nets a ~3x
        # speedup over running them all serially.
        ["type-check-py3.{8..13}", "pytest"],
    ]
]]

[tool.dev-cmd.tasks.ci]
description = "Runs all checks used for CI."
# None of the CI checks modify files; so they can all be run in parallel which nets a ~1.5x speedup.
steps = [["check-fmt", "check-lint", "type-check", "pytest", "zig-check-fmt", "zig-test"]]

[tool.dev-cmd]
default = "checks"
exit-style = "immediate"

### Older Pythons Support:
### ----------------------

[[tool.dev-cmd.python]]
when = "python_version >= '3.7'"

# Suppress pyproject cache keys since uv.lock is enough to uniquely determine venv content.
pyproject-cache-keys = []
extra-cache-keys = ["uv.lock"]

3rdparty-export-command = ["uv", "export", "-q", "--no-emit-project", "-o", "{requirements.txt}"]

[[tool.dev-cmd.python]]
when = "python_version >= '3' and python_version < '3.7'"

# Suppress the default extra-reqs of ["-e", "."] and perform the editable install ourselves to
# workaround issues in with older pips + editable installs + pyproject.toml.
extra-requirements = []
finalize-command = [
    "{venv-python}", "build-system/pexcz_legacy_editable.py", "{venv-site-packages}"
]

[[tool.dev-cmd.python]]
when = "python_version == '2.7'"

# These `--no-emit-package` exclusions work around a bug in UV where the py3-none-any.whl is locked
# and the py2-non-any.whl is not. We add them back below in extra-reqs along with
# backports.functools-lru-cache which uv omits from the lock completely, but is required.
3rdparty-export-command = [
    "uv", "export", "-q",
    "--no-emit-project",
    "--no-emit-package", "more-itertools",
    "--no-emit-package", "typing",
    "-o", "{requirements.txt}"
]
3rdparty-pip-install-opts = ["--no-deps"]

extra-requirements = '''
backports.functools-lru-cache==1.6.6 \
    --hash=sha256:77e27d0ffbb463904bdd5ef8b44363f6cd5ef503e664b3f599a3bf5843ed37cf
more-itertools==5.0.0 \
    --hash=sha256:c0a5785b1109a6bd7fac76d6837fd1feca158e54e521ccd2ae8bfe393cc9d4fc
typing==3.10.0.0 \
    --hash=sha256:c7219ef20c5fbf413b4567092adfc46fa6203cb8454eda33c3fc1afe1398a308
'''

# Perform the editable install ourselves to workaround issues in with older pips + editable
# installs + pyproject.toml.
finalize-command = [
    "{venv-python}", "build-system/pexcz_legacy_editable.py", "{venv-site-packages}"
]
